{
  "ver": "1.0.27",
  "uuid": "1934e286-1946-4b37-bbf9-4ac6cc904dd7",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nattribute vec3 a_position;\nvarying vec3 v_modelPos;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nvoid main () {\n  v_modelPos = a_position;\n  gl_Position = cc_matViewProj * cc_matWorld * vec4(a_position, 1);\n}",
        "frag": "\nprecision highp float;\nuniform vec4 diffuseColor;\nuniform float radius;\nuniform float outlen;\nvarying vec3 v_modelPos;\nvoid main() {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= diffuseColor;\n  float dis = length(v_modelPos);\n  if (dis <= radius) {\n      o.a = 1.0;\n  } else if (dis <= (radius + outlen)) {\n      o.a = 1.0 - (dis - radius) / outlen;\n  } else {\n      o.a = 0.0;\n  }\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nattribute vec3 a_position;\nout vec3 v_modelPos;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nvoid main () {\n  v_modelPos = a_position;\n  gl_Position = cc_matViewProj * cc_matWorld * vec4(a_position, 1);\n}",
        "frag": "\nprecision highp float;\nuniform DIFFUSE_COLOR {\n  vec4 diffuseColor;\n  float radius;\n  float outlen;\n};\nin vec3 v_modelPos;\nvoid main() {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= diffuseColor;\n  float dis = length(v_modelPos);\n  if (dis <= radius) {\n      o.a = 1.0;\n  } else if (dis <= (radius + outlen)) {\n      o.a = 1.0 - (dis - radius) / outlen;\n  } else {\n      o.a = 0.0;\n  }\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}